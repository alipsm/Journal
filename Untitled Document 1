//@ts-ignore
import ReCAPTCHA from "react-google-recaptcha";
import React, { useEffect, useRef, useState } from "react";
import Link from "next/link";
import { useMutation, useQueryClient } from "react-query";

import useFormValidation from "@/hooks/useFormValidation";
// import { toast, Toaster } from "react-hot-toast";
import { toastOptions } from "@/constants";
import useUserRegistration from "@/hooks/useRegistration";
import TextInput from "../elements/Input/TextInput";
import AuthButton from "../elements/Button/AuthButton";
import { toast } from "react-toastify";

const postTodo = async () => {
  // const response = await fetch('api/tasks', {
  //   method: 'POST',
  //   headers: {
  //     'Content-Type': 'application/json',
  //   },
  //   body: JSON.stringify({ text }),
  // });
  try {
    return new Error("Failed to insert new todo");
  } catch (error) {
    throw error;
  }
  // return await {name:"ali",age:21};
};

export default function RegisterForm() {
  const queryClient = useQueryClient();
  const { getValidation } = useFormValidation();
  const { register } = useUserRegistration();

  const [loa, setLoa] = useState(false);

  const capRef = useRef(null);

  const {
    mutate: registerUserMutate,
    isLoading,
    error,
    data,
  } = useMutation({
    mutationFn: async (form: React.FormEvent) => {
      // @ts-ignore
      const token = capRef.current?.getValue();
      await register(form, token)
    },
    onSuccess: (result, variables, context) => {
      toast.success("wellcome to the Journal :)");
      // alert("hi")
      // const formData = new FormData(variables.target as HTMLFormElement)
      // const objFormData = Object.fromEntries(formData.entries());
      // queryClient.setQueryData('userData', objFormData);
    },
    onError(error: string, variables, context) {
      toast.error("error");
      // console.log('error :>> ', error);
    },
    onSettled(data, error, variables, context) {
      // toast.error(error);
    },
  });

  // handle submit and check validation
  async function handleSubmit(e: React.FormEvent) {
    await toast.info("hello timeout");

    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const { status, message } = getValidation(formData);
    if (status) {
      registerUserMutate(e);
    } else {
      // toast.error(message, toastOptions);
    }
  }

  setTimeout(() => {}, 0);
  Promise.resolve();
  console.log("hi");

  // console.log("loading is:",isLoading);
  return (
    <div className="flex flex-col justify-between items-center text-center absolute top-0 pt-20 right-0 h-full  bg-white mdl:w-2/5">
      <b className=" text-3xl text-dropdown p-2">عضویت</b>
      {/* <Toaster/> */}

      <p className=" text-base text-dropdown opacity-50">
        حساب کاربری جدیدی ایجاد کنید
      </p>
      <form onSubmit={handleSubmit} className="grid gap-10 w-3/5 my-12">
        {/* @ts-ignore */}
        <TextInput
          width={"100%"}
          textLabelInput={"نام"}
          name="fullName"
          errorTextId={"FullName_Input"}
          value="parsamanesh"
        />
        {/* @ts-ignore */}
        <TextInput
          width={"100%"}
          textLabelInput={"ایمیل"}
          name="email"
          errorTextId={"Email_Input"}
          value="stooormix@gmail.com"
        />
        {/* @ts-ignore */}
        <TextInput
          width={"100%"}
          textLabelInput={"گذرواژه"}
          name="password"
          errorTextId={"Pass_Input"}
          value="password"
        />
        {/* @ts-ignore */}

        <TextInput
          width={"100%"}
          textLabelInput={"تکرار گذرواژه"}
          name="confirmPassword"
          errorTextId={"PassConfirm_Input"}
          value="password"
        />
        <ReCAPTCHA
          className={"recaptcha flex justify-center h-20"}
          sitekey={process.env.NEXT_PUBLIC_CAPTCHA_SITE_KEY}
          name="captcha"
          ref={capRef}
        />
        <small className="">لطفا captcah را تکمیل کنید.</small>
        {/* <button
          // type="submit"
          onClick={()=>toast.error("error message1")}
          className=" px-10 py-2 rounded-lg text-white bg-button text-[16px] border border-dotin hover:bg-buttonHover duration-300">
            {isLoading?"لطفا صبرکنید...":"ثبت نام"}
          
        </button> */}

        {/* @ts-ignore */}
        <AuthButton textValue="ثبت نام" type="submit" isLoading={isLoading} />
      </form>
      <div></div>
      <div className="flex items-center center flex-col justify-evenly  bottom-0 right-0 w-full bg-gray">
        <span className=" text-dropdown opacity-50 text-base">
          حساب کاربری دارید؟
        </span>
        <Link
          href={"login"}
          className=" px-10 py-2 rounded-lg text-white bg-button text-[16px] border border-dotin hover:bg-buttonHover duration-300">
          ورود
        </Link>
      </div>
      <button
        // type="submit"
        onClick={() => toast.error("error message1")}
        className=" px-10 py-2 rounded-lg text-white bg-button text-[16px] border border-dotin hover:bg-buttonHover duration-300">
        {isLoading ? "لطفا صبرکنید..." : "ثبت نام"}
      </button>
    </div>
  );
}

